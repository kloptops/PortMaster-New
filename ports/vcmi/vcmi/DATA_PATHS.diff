diff --git a/Global.h b/Global.h
index 6fa656a17..d9e46738f 100644
--- a/Global.h
+++ b/Global.h
@@ -15,6 +15,8 @@
 // Fixed width bool data type is important for serialization
 static_assert(sizeof(bool) == 1, "Bool needs to be 1 byte in size.");
 
+#  define VCMI_PORTMASTER
+
 /* ---------------------------------------------------------------------------- */
 /* System detection. */
 /* ---------------------------------------------------------------------------- */
diff --git a/client/gui/CursorHandler.cpp b/client/gui/CursorHandler.cpp
index eaa8cfd98..d7c38cfe5 100644
--- a/client/gui/CursorHandler.cpp
+++ b/client/gui/CursorHandler.cpp
@@ -24,7 +24,7 @@
 
 std::unique_ptr<ICursor> CursorHandler::createCursor()
 {
-#if defined(VCMI_MOBILE)
+#if defined(VCMI_MOBILE) || defined(VCMI_PORTMASTER)
 	if (settings["general"]["userRelativePointer"].Bool())
 		return std::make_unique<CursorSoftware>();
 #endif
diff --git a/lib/VCMIDirs.cpp b/lib/VCMIDirs.cpp
index 1eaadefc2..b9c813cd5 100644
--- a/lib/VCMIDirs.cpp
+++ b/lib/VCMIDirs.cpp
@@ -579,6 +579,94 @@ void VCMIDirsAndroid::init()
 	nativePath = envHelper.callStaticStringMethod(CAndroidVMHelper::NATIVE_METHODS_DEFAULT_CLASS, "nativePath");
 	IVCMIDirsUNIX::init();
 }
+#elif defined(VCMI_PORTMASTER)
+class VCMIDirsPM : public IVCMIDirsUNIX
+{
+public:
+	bfs::path userDataPath() const override;
+	bfs::path userCachePath() const override;
+	bfs::path userConfigPath() const override;
+
+	std::vector<bfs::path> dataPaths() const override;
+
+	bfs::path libraryPath() const override;
+	bfs::path binaryPath() const override;
+
+	std::string libraryName(const std::string& basename) const override;
+};
+
+bfs::path VCMIDirsPM::userDataPath() const
+{
+	const char* homeDir;
+	if((homeDir = getenv("PORTMASTER_HOME")))
+		return bfs::path(homeDir) / "data";
+	else
+		return bfs::path(".") / "data";
+}
+bfs::path VCMIDirsPM::userCachePath() const
+{
+	// $XDG_CACHE_HOME, default: $HOME/.cache
+	const char * tempResult;
+	if ((tempResult = getenv("PORTMASTER_HOME")))
+		return bfs::path(tempResult) / "cache";
+	else
+		return bfs::path(".") / "cache";
+}
+bfs::path VCMIDirsPM::userConfigPath() const
+{
+	// $XDG_CONFIG_HOME, default: $HOME/.config
+	const char * tempResult;
+	if ((tempResult = getenv("PORTMASTER_HOME")))
+		return bfs::path(tempResult) / "save";
+	else
+		return bfs::path(".") / "save";
+}
+
+std::vector<bfs::path> VCMIDirsPM::dataPaths() const
+{
+	// $XDG_DATA_DIRS, default: /usr/local/share/:/usr/share/
+
+	// construct list in reverse.
+	// in specification first directory has highest priority
+	// in vcmi fs last directory has highest priority
+	std::vector<bfs::path> ret;
+	const char * tempResult;
+	if ((tempResult = getenv("PORTMASTER_HOME")))
+	{
+		ret.push_back(bfs::path(tempResult) / "data");
+		ret.push_back(bfs::path(tempResult));
+	}
+
+	ret.push_back(bfs::path(".") / "data");
+	ret.push_back(bfs::path("."));
+	return ret;
+}
+
+bfs::path VCMIDirsPM::libraryPath() const
+{
+	const char * homeResult;
+	const char * archResult;
+
+	if ((homeResult = getenv("PORTMASTER_HOME")))
+		if ((archResult = getenv("DEVICE_ARCH")))
+			return bfs::path(homeResult) / (std::string("libs.") + archResult);
+		else
+			return bfs::path(homeResult) / "libs";
+	else
+		return M_LIB_DIR;
+}
+
+bfs::path VCMIDirsPM::binaryPath() const
+{
+	const char * tempResult;
+	if ((tempResult = getenv("PORTMASTER_HOME")))
+		return bfs::path(tempResult) / "bin";
+	else
+		return M_BIN_DIR;
+}
+
+std::string VCMIDirsPM::libraryName(const std::string& basename) const { return "lib" + basename + ".so"; }
+
 #elif defined(VCMI_XDG)
 class VCMIDirsXDG : public IVCMIDirsUNIX
 {
@@ -700,6 +788,8 @@ namespace VCMIDirs
 			static VCMIDirsWIN32 singleton;
 		#elif defined(VCMI_ANDROID)
 			static VCMIDirsAndroid singleton;
+		#elif defined(VCMI_PORTMASTER)
+			static VCMIDirsPM singleton;
 		#elif defined(VCMI_XDG)
 			static VCMIDirsXDG singleton;
 		#elif defined(VCMI_MAC)
diff --git a/scripting/lua/LuaScriptingContext.cpp b/scripting/lua/LuaScriptingContext.cpp
index 5c351f623..6f60207ad 100644
--- a/scripting/lua/LuaScriptingContext.cpp
+++ b/scripting/lua/LuaScriptingContext.cpp
@@ -46,7 +46,7 @@ LuaContext::LuaContext(const Script * source, const Environment * env_):
 		{LUA_TABLIBNAME, luaopen_table},
 		{LUA_STRLIBNAME, luaopen_string},
 		{LUA_MATHLIBNAME, luaopen_math},
-		{LUA_BITLIBNAME, luaopen_bit}
+		{LUA_BITLIBNAME, luaopen_bit32}
 	};
 
 	for(const luaL_Reg & lib : STD_LIBS)
diff --git a/server/processors/PlayerMessageProcessor.cpp b/server/processors/PlayerMessageProcessor.cpp
index 5929bbd87..f58b3ee5b 100644
--- a/server/processors/PlayerMessageProcessor.cpp
+++ b/server/processors/PlayerMessageProcessor.cpp
@@ -657,7 +657,8 @@ void PlayerMessageProcessor::cheatMaxMorale(PlayerColor player, const CGHeroInst
 bool PlayerMessageProcessor::handleCheatCode(const std::string & cheat, PlayerColor player, ObjectInstanceID currObj)
 {
 	std::vector<std::string> words;
-	boost::split(words, boost::trim_copy(cheat), boost::is_any_of("\t\r\n "));
+	std::string cheatTrimmed = boost::trim_copy(cheat);
+	boost::split(words, cheatTrimmed, boost::is_any_of("\t\r\n "));
 
 	if (words.empty() || !gameHandler->getStartInfo()->extraOptionsInfo.cheatsAllowed)
 		return false;
